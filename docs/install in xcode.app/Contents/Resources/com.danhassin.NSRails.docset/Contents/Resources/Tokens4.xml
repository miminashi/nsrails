<?xml version="1.0" encoding="UTF-8"?>
<Tokens version="1.0">
	<File path="Classes/NSRRequest.html">
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/cl/NSRRequest</TokenIdentifier>
			<Abstract type="html">NSRRequest is a class used internally by NSRRemoteObject to make remoteX requests, but can also be used directly to construct custom resource paths, etc.</Abstract>
			<DeclaredIn>NSRRequest.h</DeclaredIn>
			
			<NodeRef refid="4"/>
		</Token>
		
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/NSRRequest/setConfig:</TokenIdentifier>
			<Abstract type="html">Config used to make the request.</Abstract>
			<DeclaredIn>NSRRequest.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, strong) NSRConfig *config</Declaration>
			
			
			<Anchor>//api/name/config</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/NSRRequest/config</TokenIdentifier>
			<Abstract type="html">Config used to make the request.</Abstract>
			<DeclaredIn>NSRRequest.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, strong) NSRConfig *config</Declaration>
			
			
			<Anchor>//api/name/config</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/NSRRequest/config</TokenIdentifier>
			<Abstract type="html">Config used to make the request.</Abstract>
			<DeclaredIn>NSRRequest.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, strong) NSRConfig *config</Declaration>
			
			
			<Anchor>//api/name/config</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/NSRRequest/setRoute:</TokenIdentifier>
			<Abstract type="html">The path to be appended to config&apos;s appURL (the base URL of your app).</Abstract>
			<DeclaredIn>NSRRequest.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, readonly) NSString *route</Declaration>
			
			
			<Anchor>//api/name/route</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/NSRRequest/route</TokenIdentifier>
			<Abstract type="html">The path to be appended to config&apos;s appURL (the base URL of your app).</Abstract>
			<DeclaredIn>NSRRequest.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, readonly) NSString *route</Declaration>
			
			
			<Anchor>//api/name/route</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/NSRRequest/route</TokenIdentifier>
			<Abstract type="html">The path to be appended to config&apos;s appURL (the base URL of your app).</Abstract>
			<DeclaredIn>NSRRequest.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, readonly) NSString *route</Declaration>
			
			
			<Anchor>//api/name/route</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/NSRRequest/setHttpMethod:</TokenIdentifier>
			<Abstract type="html">The HTTP verb with which to make the request.</Abstract>
			<DeclaredIn>NSRRequest.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, readonly) NSString *httpMethod</Declaration>
			
			
			<Anchor>//api/name/httpMethod</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/NSRRequest/httpMethod</TokenIdentifier>
			<Abstract type="html">The HTTP verb with which to make the request.</Abstract>
			<DeclaredIn>NSRRequest.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, readonly) NSString *httpMethod</Declaration>
			
			
			<Anchor>//api/name/httpMethod</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/NSRRequest/httpMethod</TokenIdentifier>
			<Abstract type="html">The HTTP verb with which to make the request.</Abstract>
			<DeclaredIn>NSRRequest.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, readonly) NSString *httpMethod</Declaration>
			
			
			<Anchor>//api/name/httpMethod</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/NSRRequest/setQueryParameters:</TokenIdentifier>
			<Abstract type="html">The query parameters with which to make the request.</Abstract>
			<DeclaredIn>NSRRequest.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, strong) NSDictionary *queryParameters</Declaration>
			
			
			<Anchor>//api/name/queryParameters</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/NSRRequest/queryParameters</TokenIdentifier>
			<Abstract type="html">The query parameters with which to make the request.</Abstract>
			<DeclaredIn>NSRRequest.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, strong) NSDictionary *queryParameters</Declaration>
			
			
			<Anchor>//api/name/queryParameters</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/NSRRequest/queryParameters</TokenIdentifier>
			<Abstract type="html">The query parameters with which to make the request.</Abstract>
			<DeclaredIn>NSRRequest.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, strong) NSDictionary *queryParameters</Declaration>
			
			
			<Anchor>//api/name/queryParameters</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/NSRRequest/setAdditionalHTTPHeaders:</TokenIdentifier>
			<Abstract type="html">A dictionary of additional HTTP headers to send with the request.
  </Abstract>
			<DeclaredIn>NSRRequest.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, strong) NSDictionary *additionalHTTPHeaders</Declaration>
			
			
			<Anchor>//api/name/additionalHTTPHeaders</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/NSRRequest/additionalHTTPHeaders</TokenIdentifier>
			<Abstract type="html">A dictionary of additional HTTP headers to send with the request.
  </Abstract>
			<DeclaredIn>NSRRequest.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, strong) NSDictionary *additionalHTTPHeaders</Declaration>
			
			
			<Anchor>//api/name/additionalHTTPHeaders</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/NSRRequest/additionalHTTPHeaders</TokenIdentifier>
			<Abstract type="html">A dictionary of additional HTTP headers to send with the request.
  </Abstract>
			<DeclaredIn>NSRRequest.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, strong) NSDictionary *additionalHTTPHeaders</Declaration>
			
			
			<Anchor>//api/name/additionalHTTPHeaders</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/NSRRequest/setBody:</TokenIdentifier>
			<Abstract type="html">Request body.</Abstract>
			<DeclaredIn>NSRRequest.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, strong) id body</Declaration>
			
			
			<Anchor>//api/name/body</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/NSRRequest/body</TokenIdentifier>
			<Abstract type="html">Request body.</Abstract>
			<DeclaredIn>NSRRequest.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, strong) id body</Declaration>
			
			
			<Anchor>//api/name/body</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/NSRRequest/body</TokenIdentifier>
			<Abstract type="html">Request body.</Abstract>
			<DeclaredIn>NSRRequest.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, strong) id body</Declaration>
			
			
			<Anchor>//api/name/body</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/NSRRequest/GET</TokenIdentifier>
			<Abstract type="html">Creates and returns an NSRRequest object initialized with httpMethod set to @&quot;GET&quot;.</Abstract>
			<DeclaredIn>NSRRequest.h</DeclaredIn>			
			
			<Declaration>+ (NSRRequest *)GET</Declaration>
			
			<ReturnValue><Abstract type="html">An NSRRequest object initialized with httpMethod set to @&quot;GET&quot;.</Abstract></ReturnValue>
			<Anchor>//api/name/GET</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/NSRRequest/DELETE</TokenIdentifier>
			<Abstract type="html">Creates and returns an NSRRequest object initialized with httpMethod set to @&quot;DELETE&quot;.</Abstract>
			<DeclaredIn>NSRRequest.h</DeclaredIn>			
			
			<Declaration>+ (NSRRequest *)DELETE</Declaration>
			
			<ReturnValue><Abstract type="html">An NSRRequest object initialized with httpMethod set to @&quot;DELETE&quot;.</Abstract></ReturnValue>
			<Anchor>//api/name/DELETE</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/NSRRequest/POST</TokenIdentifier>
			<Abstract type="html">Creates and returns an NSRRequest object initialized with httpMethod set to @&quot;POST&quot;.</Abstract>
			<DeclaredIn>NSRRequest.h</DeclaredIn>			
			
			<Declaration>+ (NSRRequest *)POST</Declaration>
			
			<ReturnValue><Abstract type="html">An NSRRequest object initialized with httpMethod set to @&quot;POST&quot;.</Abstract></ReturnValue>
			<Anchor>//api/name/POST</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/NSRRequest/PUT</TokenIdentifier>
			<Abstract type="html">Creates and returns an NSRRequest object initialized with httpMethod set to @&quot;PUT&quot;.</Abstract>
			<DeclaredIn>NSRRequest.h</DeclaredIn>			
			
			<Declaration>+ (NSRRequest *)PUT</Declaration>
			
			<ReturnValue><Abstract type="html">An NSRRequest object initialized with httpMethod set to @&quot;PUT&quot;.</Abstract></ReturnValue>
			<Anchor>//api/name/PUT</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/NSRRequest/PATCH</TokenIdentifier>
			<Abstract type="html">Creates and returns an NSRRequest object initialized with httpMethod set to @&quot;PATCH&quot;.</Abstract>
			<DeclaredIn>NSRRequest.h</DeclaredIn>			
			
			<Declaration>+ (NSRRequest *)PATCH</Declaration>
			
			<ReturnValue><Abstract type="html">An NSRRequest object initialized with httpMethod set to @&quot;PATCH&quot;.</Abstract></ReturnValue>
			<Anchor>//api/name/PATCH</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/NSRRequest/requestToFetchObjectWithID:ofClass:</TokenIdentifier>
			<Abstract type="html">Creates and returns an NSRRequest object set to fetch an object with a specified ID.</Abstract>
			<DeclaredIn>NSRRequest.h</DeclaredIn>			
			
			<Declaration>+ (NSRRequest *)requestToFetchObjectWithID:(NSNumber *)remoteID ofClass:(Class)class</Declaration>
			<Parameters>
				<Parameter>
					<Name>remoteID</Name>
					<Abstract type="html">Remote ID of the object you wish to fetch. Will raise an exception if this is nil.</Abstract>
				</Parameter><Parameter>
					<Name>class</Name>
					<Abstract type="html">Class of the object you wish to fetch. Must be an NSRRemoteObject subclass.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">An NSRRequest object set to fetch an object with a specified ID.</Abstract></ReturnValue>
			<Anchor>//api/name/requestToFetchObjectWithID:ofClass:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/NSRRequest/requestToFetchAllObjectsOfClass:</TokenIdentifier>
			<Abstract type="html">Creates and returns an NSRRequest object set to fetch all objects of a given class.</Abstract>
			<DeclaredIn>NSRRequest.h</DeclaredIn>			
			
			<Declaration>+ (NSRRequest *)requestToFetchAllObjectsOfClass:(Class)class</Declaration>
			<Parameters>
				<Parameter>
					<Name>class</Name>
					<Abstract type="html">Class of the object you wish to fetch. Must be an NSRRemoteObject subclass.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">An NSRRequest object set to fetch all objects of a given class.</Abstract></ReturnValue>
			<Anchor>//api/name/requestToFetchAllObjectsOfClass:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/NSRRequest/requestToFetchAllObjectsOfClass:viaObject:</TokenIdentifier>
			<Abstract type="html">Creates and returns an NSRRequest object set to fetch all objects of a given class given a parent object.</Abstract>
			<DeclaredIn>NSRRequest.h</DeclaredIn>			
			
			<Declaration>+ (NSRRequest *)requestToFetchAllObjectsOfClass:(Class)class viaObject:(NSRRemoteObject *)obj</Declaration>
			<Parameters>
				<Parameter>
					<Name>class</Name>
					<Abstract type="html">Class of the object you wish to fetch. Must be an NSRRemoteObject subclass.</Abstract>
				</Parameter><Parameter>
					<Name>obj</Name>
					<Abstract type="html">Parent object used to prefix the route.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">An NSRRequest object set to fetch all objects of a given class given a parent object.</Abstract></ReturnValue>
			<Anchor>//api/name/requestToFetchAllObjectsOfClass:viaObject:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/NSRRequest/requestToCreateObject:</TokenIdentifier>
			<Abstract type="html">Creates and returns an NSRRequest object set to remotely create a given object.</Abstract>
			<DeclaredIn>NSRRequest.h</DeclaredIn>			
			
			<Declaration>+ (NSRRequest *)requestToCreateObject:(NSRRemoteObject *)obj</Declaration>
			<Parameters>
				<Parameter>
					<Name>obj</Name>
					<Abstract type="html">Object you wish to create.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">An NSRRequest object set to remotely create a given object.</Abstract></ReturnValue>
			<Anchor>//api/name/requestToCreateObject:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/NSRRequest/requestToFetchObject:</TokenIdentifier>
			<Abstract type="html">Creates and returns an NSRRequest object set to fetch a given object&apos;s remote correspondance.</Abstract>
			<DeclaredIn>NSRRequest.h</DeclaredIn>			
			
			<Declaration>+ (NSRRequest *)requestToFetchObject:(NSRRemoteObject *)obj</Declaration>
			<Parameters>
				<Parameter>
					<Name>obj</Name>
					<Abstract type="html">Object you wish to fetch.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">An NSRRequest object set to fetch a given object&apos;s remote correspondance.</Abstract></ReturnValue>
			<Anchor>//api/name/requestToFetchObject:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/NSRRequest/requestToDestroyObject:</TokenIdentifier>
			<Abstract type="html">Creates and returns an NSRRequest object set to remotely destroy a given object.</Abstract>
			<DeclaredIn>NSRRequest.h</DeclaredIn>			
			
			<Declaration>+ (NSRRequest *)requestToDestroyObject:(NSRRemoteObject *)obj</Declaration>
			<Parameters>
				<Parameter>
					<Name>obj</Name>
					<Abstract type="html">Object you wish to fetch.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">An NSRRequest object set to destroy a given object&apos;s remote correspondance.</Abstract></ReturnValue>
			<Anchor>//api/name/requestToDestroyObject:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/NSRRequest/requestToUpdateObject:</TokenIdentifier>
			<Abstract type="html">Creates and returns an NSRRequest object set to remotely update a given object.</Abstract>
			<DeclaredIn>NSRRequest.h</DeclaredIn>			
			
			<Declaration>+ (NSRRequest *)requestToUpdateObject:(NSRRemoteObject *)obj</Declaration>
			<Parameters>
				<Parameter>
					<Name>obj</Name>
					<Abstract type="html">Object you wish to update.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">An NSRRequest object set to remotely update a given object.</Abstract></ReturnValue>
			<Anchor>//api/name/requestToUpdateObject:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/NSRRequest/requestToReplaceObject:</TokenIdentifier>
			<Abstract type="html">Creates and returns an NSRRequest object set to remotely &quot;put&quot; (replace) a given object.</Abstract>
			<DeclaredIn>NSRRequest.h</DeclaredIn>			
			
			<Declaration>+ (NSRRequest *)requestToReplaceObject:(NSRRemoteObject *)obj</Declaration>
			<Parameters>
				<Parameter>
					<Name>obj</Name>
					<Abstract type="html">Object you wish to update.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">An NSRRequest object set to remotely &quot;put&quot; (replace) a given object.</Abstract></ReturnValue>
			<Anchor>//api/name/requestToReplaceObject:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/NSRRequest/routeTo:</TokenIdentifier>
			<Abstract type="html">Routes the request to the given string.</Abstract>
			<DeclaredIn>NSRRequest.h</DeclaredIn>			
			
			<Declaration>- (NSRRequest *)routeTo:(NSString *)route</Declaration>
			<Parameters>
				<Parameter>
					<Name>route</Name>
					<Abstract type="html">The route.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/routeTo:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/NSRRequest/routeToClass:</TokenIdentifier>
			<Abstract type="html">Routes the request to a given class&apos;s controller.</Abstract>
			<DeclaredIn>NSRRequest.h</DeclaredIn>			
			
			<Declaration>- (NSRRequest *)routeToClass:(Class)class</Declaration>
			<Parameters>
				<Parameter>
					<Name>class</Name>
					<Abstract type="html">Class to which to route. Must be an NSRRemoteObject subclass.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/routeToClass:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/NSRRequest/routeToObject:</TokenIdentifier>
			<Abstract type="html">Routes the request to a given object.</Abstract>
			<DeclaredIn>NSRRequest.h</DeclaredIn>			
			
			<Declaration>- (NSRRequest *)routeToObject:(NSRRemoteObject *)object</Declaration>
			<Parameters>
				<Parameter>
					<Name>object</Name>
					<Abstract type="html">Object to route to. If this object&apos;s remoteID is nil, will only route to its class.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/routeToObject:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/NSRRequest/routeToClass:withCustomMethod:</TokenIdentifier>
			<Abstract type="html">Routes the request to a given class&apos;s controller.</Abstract>
			<DeclaredIn>NSRRequest.h</DeclaredIn>			
			
			<Declaration>- (NSRRequest *)routeToClass:(Class)class withCustomMethod:(NSString *)customMethod</Declaration>
			<Parameters>
				<Parameter>
					<Name>class</Name>
					<Abstract type="html">Class to route to. Must be an NSRRemoteObject subclass.</Abstract>
				</Parameter><Parameter>
					<Name>customMethod</Name>
					<Abstract type="html">Custom method to be appended to the class&apos;s controller RESTfully (can be nil.)</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/routeToClass:withCustomMethod:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/NSRRequest/routeToObject:withCustomMethod:</TokenIdentifier>
			<Abstract type="html">Routes the request to a given object.</Abstract>
			<DeclaredIn>NSRRequest.h</DeclaredIn>			
			
			<Declaration>- (NSRRequest *)routeToObject:(NSRRemoteObject *)object withCustomMethod:(NSString *)customMethod</Declaration>
			<Parameters>
				<Parameter>
					<Name>object</Name>
					<Abstract type="html">Object to route to. If this object&apos;s remoteID is nil, will only route to its class.</Abstract>
				</Parameter><Parameter>
					<Name>customMethod</Name>
					<Abstract type="html">Custom method to be appended RESTfully (can be nil.)</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">The request itself. Done to allow concise constructions (see above.</Abstract></ReturnValue>
			<Anchor>//api/name/routeToObject:withCustomMethod:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/NSRRequest/setBodyToObject:</TokenIdentifier>
			<Abstract type="html">Sets the body to a given object.</Abstract>
			<DeclaredIn>NSRRequest.h</DeclaredIn>			
			
			<Declaration>- (void)setBodyToObject:(NSRRemoteObject *)object</Declaration>
			<Parameters>
				<Parameter>
					<Name>object</Name>
					<Abstract type="html">Object to use as a body to send the request.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/setBodyToObject:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/NSRRequest/sendSynchronous:</TokenIdentifier>
			<Abstract type="html">Sends the request synchronously.</Abstract>
			<DeclaredIn>NSRRequest.h</DeclaredIn>			
			
			<Declaration>- (id)sendSynchronous:(NSError **)error</Declaration>
			<Parameters>
				<Parameter>
					<Name>error</Name>
					<Abstract type="html">Out parameter used if an error occurs while processing the request. May be NULL.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">JSON response object (could be an NSArray or NSDictionary).</Abstract></ReturnValue>
			<Anchor>//api/name/sendSynchronous:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/NSRRequest/sendAsynchronous:</TokenIdentifier>
			<Abstract type="html">Sends the request asynchronously.</Abstract>
			<DeclaredIn>NSRRequest.h</DeclaredIn>			
			
			<Declaration>- (void)sendAsynchronous:(NSRHTTPCompletionBlock)completionBlock</Declaration>
			<Parameters>
				<Parameter>
					<Name>completionBlock</Name>
					<Abstract type="html">Block to be executed when the request is complete.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/sendAsynchronous:</Anchor>
		</Token>
		
	</File>
</Tokens>